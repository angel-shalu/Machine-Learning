import numpy as np  
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pickle

# Load the dataset
dataset = pd.read_csv(r"C:\Users\shali\Desktop\DS_Road_Map\8. Machine Learning\Regression\SLR_House_Price_Prediction\House_data.csv")

# Drop non-numeric / unnecessary columns (like 'id' and 'date')
dataset = dataset.drop(columns=['id', 'date'], errors='ignore')

# Independent variable(s) (X) and dependent variable (y)
X = dataset[['sqft_living']].values   # You can also add more features later
y = dataset['price'].values

# Split the dataset into training and testing sets (80-20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

# Train the model
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predict the test set
y_pred = regressor.predict(X_test)

#comparision for y_test vs y_pred
comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison)

# Visualize the training set
plt.scatter(X_train, y_train, color='red')
plt.plot(X_train, regressor.predict(X_train), color='blue')
plt.title('House Price vs. Square Feet Living')
plt.xlabel('Square Feet Living')
plt.ylabel('Price')
plt.show()

# Visualize the test set
plt.scatter(X_train, y_train, color='red')
plt.plot(X_train, regressor.predict(X_train), color='blue')
plt.title('House Price vs. Square Feet Living')
plt.xlabel('Square Feet Living')
plt.ylabel('Price')
plt.show()

# Predict price for sqft_living using the trained model
y_2207 = regressor.predict([[2207]])
y_8870 = regressor.predict([[8870]])
print(f"Predicted price for 770 of sq_feet_living: ${y_2207[0]:,.2f}")
print(f"Predicted price for 8870 of sq_feet_living: ${y_8870[0]:,.2f}")

# Check model performance
bias = regressor.score(X_train, y_train)
variance = regressor.score(X_test, y_test)
train_mse = mean_squared_error(y_train, regressor.predict(X_train))
test_mse = mean_squared_error(y_test, y_pred)

print(f"Training Score (R^2): {bias:.2f}")
print(f"Testing Score (R^2): {variance:.2f}")
print(f"Training MSE: {train_mse:.2f}")
print(f"Test MSE: {test_mse:.2f}")

# Save the trained model to disk
import pickle
filename = 'linear_regression_model.pkl'
with open(filename, 'wb') as file:
     pickle.dump(regressor, file)
     
print("Model has been pickled and saved as linear_regression_model.pkl")
import os
os.getcwd()
